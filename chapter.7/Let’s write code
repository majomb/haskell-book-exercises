1. The following function returns the tens digit of an integral
argument.

tensDigit :: Integral a => a -> a
tensDigit x = d
  where xLast = x `div` 10
    d = xLast `mod` 10

a) First, rewrite it using divMod.
tensDigit x = d
  where xLast = fst $ x `divMod` 10
    d = snd $ xLast `divMod` 10
b) Does the divMod version have the same type as the original
version?
yes


2. Implement the function of the type a -> a -> Bool -> a once
each using a case expression and once with a guard.

foldBool3 :: a -> a -> Bool -> a
foldBool3 x y True = x
foldBool3 x y False = y

foldBool3 x y b = case b of
  True = x
  False = y

foldBool3 x y b
  | b = x
  | otherwise = y

3. Fill in the definition. Note that the first argument to our function
is also a function which can be applied to values. Your second
argument is a tuple, which can be used for pattern matching:
g :: (a -> b) -> (a, c) -> (b, c)
g aToB (a, c) = (aToB a ,c)

4. For this next exercise, you’ll experiment with writing pointfree
versions of existing code. This involves some new information,
so read the following explanation carefully.
Typeclasses are dispatched by type. Read is a typeclass like Show,
but it is the dual or “opposite” of Show. In general, the Read type-
class isn’t something you should plan to use a lot, but this exer-
cise is structured to teach you something about the interaction
between typeclasses and types.
The function read in the Read typeclass has the type:

read :: Read a => String -> a

Notice a pattern?
read :: Read a => String -> a
show :: Show a => a -> String
Write the following code into a source file. Then load it and
run it in GHCi to make sure you understand why the evaluation
results in the answers you see.

5. Next, write a pointfree version of roundTrip. (n.b., this refers to
the function definition, not to its application in main)
roundTrip = read . show

6. We will continue to use the code in module Arith4 for this exercise
as well.
When we apply show to a value such as (1 :: Int), the a that
implements Show is Int, so GHC will use the Int instance of the
Show typeclass to stringify our Int of 1.
However, read expects a String argument in order to return an
a. The String argument that is the first argument to read tells
the function nothing about what type the de-stringified result
should be. In the type signature roundTrip currently has, it knows
because the type variables are the same, so the type that is the
input to show has to be the same type as the output of read.

Your task now is to change the type of roundTrip in Arith4 to (Show
a, Read b) => a -> b. How might we tell GHC which instance of
Read to dispatch against the String now? Make the expression
print (roundTrip 4) work. You will only need the has the type
syntax of :: and parentheses for scoping.
