1. It is probably clear to you why you wouldn’t put an otherwise in
your top-most guard, but try it with avgGrade anyway and see
what happens. It’ll be more clear if you rewrite it as an actual
otherwise match: | otherwise = 'F'. What happens now if you
pass a 90 as an argument? 75? 60?
avgGuard :: (Fractional a, Ord a) => a -> Char
avgGuard x
  | y >= 0.9 = 'A'
  | y >= 0.8 = 'B'
  | y >= 0.7 = 'C'
  | y >= 0.6 = 'D'
  | otherwise = 'F'
  where y = x / 100

  2. What happens if you take avgGrade as it is written and reorder
the guards? Does it still typecheck and work the same? Try
moving | y >= 0.7 = 'C' and passing it the argument 90, which
should be an ‘A.’ Does it return an ‘A’?
depends on order

3. The following function returns
pal xs
  | xs == reverse xs = True
  | otherwise = False

b) True when xs is a palindrome

4. What types of arguments can pal take?
pal :: Eq a => [a] -> Bool

5. What is the type of the function pal?
pal :: Eq a => [a] -> Bool

6. The following function returns
numbers x
  | x < 0 = -1
  | x == 0 = 0
  | x > 0 = 1

  c) an indication of whether its argument is a positive or nega-
tive number or zero

7. What types of arguments can numbers take?
Num a, Ord a

8. What is the type of the function numbers?
Num a, Ord a, Num b => a -> b
