1. myOr returns True if any Bool in the list is True.
myOr :: [Bool] -> Bool
myOr = foldr (||) False

2. myAny returns True if a -> Bool applied to any of the values in the
list returns True.
myAny :: (a -> Bool) -> [a] -> Bool
myAny f = foldr (\a b -> b || f a) False

3. Write two versions of myElem. One version should use folding
and the other should use any.
myElem :: Eq a => a -> [a] -> Bool
myElem x = foldr (\x' acc' -> acc' || x' == x) False

myElem2 :: Eq a => a -> [a] -> Bool
myElem2 x = any (x==)

4. Implement myReverse, donâ€™t worry about trying to make it
lazy.
myReverse :: [a] -> [a]
myReverse = foldl (flip (:)) []

5. Write myMap in terms of foldr. It should have the same behavior
as the built-in map.
myMap :: (a -> b) -> [a] -> [b]
myMap f = foldr (\x acc -> f x : acc) []
myMap' f = foldr ((:) . f) []

6. Write myFilter in terms of foldr. It should have the same behav-
ior as the built-in filter.
myFilter :: (a -> Bool) -> [a] -> [a]
myFilter f = foldr doFilter [] where
  doFilter x acc
    | f x = x : acc
    | otherwise = acc

7. squish flattens a list of lists into a list
squish :: [[a]] -> [a]
squish = foldr f [] where
  f :: [a] -> [a] -> [a]
  f xs acc = foldr g acc xs where
    g :: a -> [a] -> [a]
    g x acc = x : acc

squish' = foldr (++) []

8. squishMap maps a function over a list and concatenates the re-
sults.
squishMap :: (a -> [b]) -> [a] -> [b]
squishMap f = foldr (\x acc -> (f x) ++ acc) []

squishMap' f = foldr ((++) . f) []

9. squishAgain flattens a list of lists into a list. This time re-use the
squishMap function.
squishAgain :: [[a]] -> [a]
squishAgain = squishMap id

10. myMaximumBy takes a comparison function and a list and returns
the greatest element of the list based on the last value that the
comparison returned GT for.
myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
myMaximumBy f (x : xs) = foldr g x xs where
  g x x'
    | ((f x x') == GT) = x
    | otherwise = x'

11. myMinimumBy takes a comparison function and a list and returns
the least element of the list based on the last value that the
comparison returned LT for.
myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
myMinimumBy f (x : xs) = foldr g x xs where
  g x' x''
    | ((f x' x'') == LT) = x'
    | otherwise = x''
